name: Build and Release Compose Desktop App with temurin JDK

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      # 1. Récupérer le code
      - name: Checkout source
        uses: actions/checkout@v4

      # 2. Installer le JDK temurin 17
      - name: Set up temurin JDK
        id: setup_java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          token: ${{ secrets.GITHUB_TOKEN }}

      # 3. Importer les certificats custom dans la JVM installée
      - name: Import custom SSL certificates
        shell: bash
        run: |
          CERT_URLS=(
             "https://netfree.link/cacert/isp/018/ca.crt"
             "https://netfree.link/cacert/isp/019/ca.crt"
             "https://netfree.link/cacert/isp/099/ca.crt"
             "https://netfree.link/cacert/isp/itc/ca.crt"
             "https://netfree.link/cacert/isp/x2one/ca.crt"
             "https://netfree.link/cacert/isp/hadran-vpn/ca.crt"
             "https://netfree.link/cacert/isp/yossi/ca.crt"
             "https://netfree.link/cacert/isp/ib-itc/ca.crt"
             "https://netfree.link/cacert/isp/ib-spotnet/ca.crt"
             "https://netfree.link/cacert/isp/ib-partner/ca.crt"
             "https://netfree.link/cacert/isp/netfree-anywhere/ca.crt"
             "https://netfree.link/cacert/isp/kosher-sim/ca.crt"
             "https://netfree.link/cacert/isp/sim-kasher-triple-c/ca.crt"
             "https://netfree.link/cacert/isp/ksim-partner/ca.crt"
             "https://netfree.link/cacert/isp/ksim-pele/ca.crt"
             "https://netfree.link/cacert/isp/ksim-itc/ca.crt"
             "https://netfree.link/cacert/isp/kosher-sim-cellcom/ca.crt"
             "https://netfree.link/cacert/isp/amitnet/ca.crt"
             "https://netfree.link/cacert/isp/bezeq/ca.crt"
             "https://netfree.link/cacert/isp/hot/ca.crt"
           )

          KEYSTORE_PASS="${{ secrets.KEYSTORE_PASSWORD }}"
          if [ -z "$KEYSTORE_PASS" ]; then
            KEYSTORE_PASS="changeit"
          fi

          for i in "${!CERT_URLS[@]}"; do
            CERT_URL="${CERT_URLS[$i]}"
            CERT_ALIAS="custom-cert-$i"
            curl -fsSL "$CERT_URL" -o "cert-$i.crt"

            if [ "$RUNNER_OS" = "Windows" ]; then
              keytool -importcert \
                -file "cert-$i.crt" \
                -alias "$CERT_ALIAS" \
                -keystore "$JAVA_HOME/lib/security/cacerts" \
                -storepass "$KEYSTORE_PASS" \
                -trustcacerts -noprompt
            else
              sudo keytool -importcert \
                -file "cert-$i.crt" \
                -alias "$CERT_ALIAS" \
                -keystore "$JAVA_HOME/lib/security/cacerts" \
                -storepass "$KEYSTORE_PASS" \
                -trustcacerts -noprompt
            fi
          done

      # 4. Configurer Gradle pour utiliser JAVA_HOME
      - name: Configure Gradle to use patched JAVA_HOME
        run: echo "org.gradle.java.home=$JAVA_HOME" >> gradle.properties

      # 5. Construire l'application (packager)
      - name: Build with Gradle
        run: |
          echo "Using JAVA_HOME=$JAVA_HOME"
          java -version
          ./gradlew packageDistributionForCurrentOS

      # 6. Publier les artéfacts
      - name: Upload Linux artifact
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: linux-deb
          path: sample/composeApp/build/compose/binaries/main/deb/*.deb

      - name: Upload macOS artifact
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-pkg
          path: sample/composeApp/build/compose/binaries/main/pkg/*.pkg

      - name: Upload Windows artifact
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-msi
          path: sample/composeApp/build/compose/binaries/main/msi/*.msi

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: linux-deb

      - name: Download macOS artifact
        uses: actions/download-artifact@v4
        with:
          name: macos-pkg

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-msi

      - name: Check downloaded artifacts
        run: ls -R

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            *.deb
            *.pkg
            *.msi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
